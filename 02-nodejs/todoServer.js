/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const port=3000
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

let data=[{
  id:1,
  title:"gyming everyday",
  discription:"Some benefits of physical activity on brain health [PDF-14].",
  completed:false

},{
  id:2,
  title:"play",
  discription:"good cardio if we play reguraly",
  completed:false
}]


// const fetchData=(req,res)=>{
//   const itemId=req.params.id
//   console.log(itemId)
//   if (!itemId){
//     // const answer=data.filter(item=>item.id===itemId)
//     res.status(400)
//   }
//   else{
//   res.status(201).send(answer);
//   }
// }

app.get(`/todos`,(req,res)=>{
  res.status(200).send(data)
});

app.get(`/todos/:id`,(req,res)=>{
  itemid=data.find(t=>(t.id===parseInt(req.params.id)))
  if(!itemid){
    res.status(404).send()
  }
  else{
    res.json(itemid)
  }

})
app.get('/todos/:id', (req, res) => {
  const todo = data.find(t => t.id === parseInt(req.params.id));
  if (!todo) {
    res.status(404).send();
  } else {
    res.json(todo);
  }
});

app.post('/todos/',(req,res)=>{
  let n=data.length
  const newTodo={
    id:n+1,
    title:req.body.title,
    discription:req.body.discription,
    completed:req.body.completed
  }
  data=[...data,newTodo]

  res.status(200).send("sucessfully added Data")

})

app.put('/todos/:id',(req,res)=>{
  const todoId=data.findIndex(t=>parseInt(req.params.id)===t.id)
  const updatedTodo = req.body;
  // const todoId = data.findIndex(t => t.id === parseInt(req.params.id));
  if(todoId===-1){
    res.status(404).send()
  }
  else{
    // data[todoId].title=req.body?.title
    // data[todoId].discription=req.body?.discription
    // data[todoId].completed=req.body?.completed
    data[todoId] = { ...data[todoId], ...updatedTodo };
    res.status(200).json(data)
    
  }
})

app.delete('/todos/:id',(req,res)=>{
todoId=data.findIndex(t=>t.id===parseInt(req.params.id))
if (todoId===-1){
  res.status(404).send()
}
else{
  delete data.splice(todoId,1)
  res.status(200).json(data)
}
})


app.use((req,res,next)=>{
  res.status(400).send()
})
// app.use((req, res, next) => {
//   res.status(404).send();
// });
app.listen(port)
module.exports = app;
